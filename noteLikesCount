let retryCount = 0;
const maxRetries = 3; // 最大再試行回数

function clickLoadMoreButton() {
    const loadMoreButton = document.querySelector('.o-loadMoreButton__moreButton');
    if (loadMoreButton) {
        loadMoreButton.click();
        setTimeout(autoScroll, 1000);
    } else if (retryCount < maxRetries) {
        console.log(`「もっとみる」ボタンが見つかりません。${retryCount + 1}回目の再試行を開始します。`);
        retryCount++;
        setTimeout(clickLoadMoreButton, 2000); // 2秒後に再試行
    } else {
        console.log('再試行回数が上限に達しました。スクロールを開始します。');
        autoScroll();
    }
}

function autoScroll() {
    scrollInterval = setInterval(() => {
        const beforeScrollHeight = document.body.scrollHeight;
        window.scrollTo(0, document.body.scrollHeight); // ページの最下部にスクロール

        setTimeout(() => {
            const afterScrollHeight = document.body.scrollHeight;
            // スクロール前後でページの高さが変わらなければ、スクロールが終了したとみなす
            if (afterScrollHeight === beforeScrollHeight) {
                clearInterval(scrollInterval);
                console.log("スクロールが終了しました。");
                getLikesAndCalculateAverage(); // 「好き数」の集計を開始
            }
        }, 500); // スクロール後のページの高さをチェックするために少し待つ
    }, 800);
}

function getLikesAndCalculateAverage() {
    // '<button>' と '<span>' の両方の要素を選択
    const likeElements = document.querySelectorAll('.o-noteLikeV3__count, span.pl-2.text-sm.text-text-secondary');

    // '好き数' を整数の配列に変換
    const likes = Array.from(likeElements).map(element => {
        const likeCountText = element.innerText || element.textContent; // innerText または textContent を取得
        const likeCount = parseInt(likeCountText.trim(), 10); // 文字列を整数に変換
        return isNaN(likeCount) ? 0 : likeCount; // NaN の場合は 0 を使用
    });

    // 平均スキ数を計算
    const averageLikes = likes.length > 0 ? likes.reduce((acc, val) => acc + val, 0) / likes.length : 0;

    console.log(`記事の総数: ${likes.length}`);
    console.log(`平均スキ数: ${averageLikes}`);
}

// 「もっとみる」ボタンのクリックを試みる
clickLoadMoreButton();
